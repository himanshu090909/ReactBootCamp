{"version":3,"sources":["containers/Blog/FullPost/fullPost.module.css","components/Post/post.module.css","containers/Blog/NewPost/newPost.module.css","containers/Blog/blog.module.css","containers/Blog/Posts/posts.module.css","components/Post/Post.js","containers/Blog/FullPost/Fullpost.js","containers/Blog/NewPost/NewPost.js","axios.js","containers/Blog/Posts/Posts.js","containers/Blog/Blog.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","post","props","className","classes","Post","onClick","clicked","title","author","FullPost","state","loadedPost","deletePostHandler","axios","delete","id","then","response","console","log","this","match","params","get","setState","data","style","textAlign","body","Edit","Delete","Component","NewPost","content","postDataHandler","type","value","onChange","event","target","rows","instance","create","baseURL","Posts","posts","postSelectedHandler","history","push","pathname","updatedPosts","slice","map","catch","error","to","key","Blog","exact","path","component","App","Boolean","window","location","hostname","defaults","interceptors","request","use","Promise","reject","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.360c5746.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"FullPost\":\"fullPost_FullPost__1eRJ-\",\"Edit\":\"fullPost_Edit__lIlvP\",\"Delete\":\"fullPost_Delete__RzdKV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Post\":\"post_Post__qUeFS\",\"Author\":\"post_Author__11Bay\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NewPost\":\"newPost_NewPost__bLsCF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Blog\":\"blog_Blog__qv1l2\",\"active\":\"blog_active__2zwm3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Posts\":\"posts_Posts__1oqZk\"};","import React from 'react';\n\nimport classes from  './post.module.css';\n\nconst post = (props) => (\n    <article className={classes.Post} onClick={props.clicked}>\n        <h1>{props.title}</h1>\n        <div className=\"Info\">\n            <div className=\"Author\">{props.author}</div>\n        </div>\n    </article>\n);\n\nexport default post;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport classes from './fullPost.module.css';\n\nclass FullPost extends Component {\n  \n    state={\n        loadedPost: null\n    }\n  componentDidMount()\n  {\n    if(this.props.match.params.id)\n    {\n        if(!this.state.loadedPost || (this.state.loadedPost && this.state.loadedPost.id!==this.props.id)){\n        axios.get('/posts/'+this.props.match.params.id)\n         .then(response=>{\n         this.setState({loadedPost:response.data});\n         });\n      }\n   }\n}\n\ndeletePostHandler=()=>{\n    axios.delete('/posts/'+this.props.id)\n    .then(response=>{\n        console.log(response);\n    });\n}\n\n\n    render () {\n        let post = <p style={{textAlign:'center'}}>Please select a Post!</p>;\n        \n        if(this.props.id){\n            post = <p style={{textAlign:'center'}}>Loading</p>;\n        }\n         \n        if(this.state.loadedPost){\n            post = (\n                <div className={classes.FullPost}>\n                    <h1>{this.state.loadedPost.title}</h1>\n                    <p>{this.state.loadedPost.body}</p>\n                    <div className={classes.Edit}>\n                        <button onClick={this.deletePostHandler} className={classes.Delete}>Delete</button>\n                    </div>\n                </div>\n    \n            );\n         }\n       \n        return post;\n    }\n}\n\nexport default FullPost;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport classes from './newPost.module.css';\n\nclass NewPost extends Component {\n    state = {\n        title: '',\n        content: '',\n        author: 'Max'\n    }\n\n    postDataHandler=()=>{\n  \n      const post = {\n          title : this.state.title,\n          body : this.state.content,\n          author : this.state.author\n      };\n       axios.post('/posts',post)\n       .then(response=>{\n           console.log(response);\n       });\n    };\n\n    render () {\n        return (\n            <div className={classes.NewPost}>\n                <h1>Add a Post</h1>\n                <label>Title</label>\n                <input type=\"text\" value={this.state.title} onChange={(event) => this.setState({title: event.target.value})} />\n                <label>Content</label>\n                <textarea rows=\"4\" value={this.state.content} onChange={(event) => this.setState({content: event.target.value})} />\n                <label>Author</label>\n                <select value={this.state.author} onChange={(event) => this.setState({author: event.target.value})}>\n                    <option value=\"Max\">Max</option>\n                    <option value=\"Manu\">Manu</option>\n                </select>\n                <button onClick={this.postDataHandler}>Add Post</button>\n            </div>\n        );\n    }\n}\n\nexport default NewPost;","import axios from 'axios';\n\nconst instance = axios.create({\n\n    baseURL:'https://jsonplaceholder.typicode.com'\n});\n\nexport default instance;","import React, { Component } from 'react'\nimport axios from '../../../axios';\nimport Post from '../../../components/Post/Post';\nimport classes from './posts.module.css';\nimport { Route, Link } from 'react-router-dom';\nclass Posts extends Component {\n    \n    \n    state = {\n        posts:[]\n    }\n    componentDidMount()\n    {\n        console.log(this.props);\n        axios.get('/posts')\n        .then(response=>{\n            const posts = response.data.slice(0,4);\n            const updatedPosts = posts.map(post=>{\n                return{\n                    ...post,\n                    author:'himanshu'\n                }\n            })\n            this.setState({posts:updatedPosts});\n          // console.log(response); \n        })\n        .catch(error=>{\n            console.log(error);\n            //this.setState({error:true});\n        });\n    }\n    postSelectedHandler=(id)=>{\n       // this.setState({selectedPostId:id});\n\n       this.props.history.push({pathname:'/'+id});\n    }\n    render() {\n        let posts = <p style={{ textAlign: 'center' }}>Something went wrong</p>;\n        if (!this.state.error) {\n            posts = this.state.posts.map(post => {\n\n                return (\n              <Link to={'/' + post.id} key={post.id} >\n                    <Post key={post.id}\n                    clicked={() => this.postSelectedHandler(post.id)}\n                    title={post.title}\n                    author={post.author} />\n                </Link>\n                )\n            });\n        }\n        return (\n\n            <section className={classes.Posts}>\n                {posts}\n            </section>\n\n        )\n        }\n    }\n\nexport default Posts\n","import React, { Component } from 'react';\nimport { Route, NavLink, Switch } from 'react-router-dom';\nimport axios from 'axios';\nimport Post from '../../components/Post/Post';\nimport FullPost from './FullPost/Fullpost';\nimport NewPost from './NewPost/NewPost';\nimport classes from './blog.module.css';\nimport Posts from './Posts/Posts';\n\nclass Blog extends Component {\n    \n\n    render () {\n\n       \n        return (\n            <div>\n                <header className={classes.Blog}>\n                    <nav>\n                        <ul>\n                          \n                            <li><NavLink to=\"/\" exact>Home</NavLink></li>\n                            <li><NavLink to=\"/new-post\">New Post</NavLink></li>\n\n                        </ul>\n                    </nav>\n                </header>\n               \n                {/* <section>\n                    <FullPost id={this.state.selectedPostId}/>\n                </section>\n                <section>\n                    <NewPost />\n                </section> */}\n{/* \n              <Route path=\"/\" exact render={()=><h1>Home</h1>}/> */}\n            <Switch>\n            <Route path=\"/\" exact component={Posts}/>\n            <Route path=\"/new-post\" exact component={NewPost}/>\n            <Route path=\"/:id\" exact component={FullPost}/>\n            </Switch>\n            </div>\n        );\n    }\n}\n\nexport default Blog;","import React, { Component } from 'react';\nimport {BrowserRouter} from 'react-router-dom';\nimport Blog from './containers/Blog/Blog';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n      <div className=\"App\">\n        <Blog />\n      </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport axios from 'axios';\n\n\naxios.defaults.baseURL='https://jsonplaceholder.typicode.com';\n\n\n\naxios.interceptors.request.use(request=>{\n  console.log(request);\n  return request;\n},error=>{\n  console.log(error);\n  return Promise.reject(error);\n}\n  );\n\n\n\n  axios.interceptors.response.use(response=>{\n    console.log(response);\n    return response;\n  },error=>{\n    console.log(error);\n    return Promise.reject(error);\n  }\n    );\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}